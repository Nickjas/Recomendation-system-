})
output$mytable4 <- DT::renderDataTable({
DT::datatable(airquality)
})
output$mytable5 <- DT::renderDataTable({
DT::datatable(airquality)
})
output$mytable6 <- DT::renderDataTable({
DT::datatable(airquality)
})
p=gg_miss_upset(airquality)
output$trend=renderPlot({p})
}
shinyApp(ui = ui,server = server)
server <-function(input,output,session){
dataInput <- reactive({
gtrends(keyword = input$name, geo = input$code,
time = input$time, gprop = input$source,
low_search_volume = False, onlyInterest = FALSE)
})
#datascience <- gtrends(keyword = input$name, geo = input$code, time = input$time, gprop = input$source, low_search_volume = TRUE, onlyInterest = FALSE)
time<-dataInput$interest_over_time
region<-dataInput$interest_by_region
dma<-dataInput$interest_by_dma
topic<-dataInput$related_topics
city<-ddataInput$interest_by_city
query<-dataInput$related_queries
output$mytable1 <- DT::renderDataTable({
DT::datatable(airquality)
})
output$mytable2 <- DT::renderDataTable({
DT::datatable(airquality)
})
output$mytable3 <- DT::renderDataTable({
DT::datatable(airquality)
})
output$mytable4 <- DT::renderDataTable({
DT::datatable(airquality)
})
output$mytable5 <- DT::renderDataTable({
DT::datatable(airquality)
})
output$mytable6 <- DT::renderDataTable({
DT::datatable(airquality)
})
p=gg_miss_upset(airquality)
output$trend=renderPlot({p})
}
shinyApp(ui = ui,server = server)
library(dplyr)
library(shiny)
# https://www.kaggle.com/kyanyoga/sample-sales-data
# License: CC-0
sales <- vroom::vroom("https://www.kaggle.com/kyanyoga/sample-sales-data/sales_data_sample.csv", na = "")
install.packages("vroom")
library(vroom)
# https://www.kaggle.com/kyanyoga/sample-sales-data
# License: CC-0
sales <- vroom::vroom("https://www.kaggle.com/kyanyoga/sample-sales-data/sales_data_sample.csv", na = "")
install.packages(c(
"gapminder", "ggforce", "globals", "openintro", "shiny",
"shinycssloaders", "shinyFeedback", "shinythemes", "testthat",
"thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"
))
install.packages(c("gapminder", "ggforce", "globals", "openintro", "shiny", "shinycssloaders", "shinyFeedback", "shinythemes", "testthat", "thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"))
install.packages(c("gapminder", "ggforce", "globals", "openintro", "shiny", "shinycssloaders", "shinyFeedback", "shinythemes", "testthat", "thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"))
install.packages(c("gapminder", "ggforce", "globals", "openintro", "shiny", "shinycssloaders", "shinyFeedback", "shinythemes", "testthat", "thematic", "tidyverse", "vroom", "waiter", "xml2", "zeallot"))
# https://www.kaggle.com/kyanyoga/sample-sales-data
# License: CC-0
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
library(dplyr)
library(shiny)
install.packages("htmltools")
install.packages("htmltools")
library(dplyr)
library(shiny)
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
install.packages(c("backports", "broom", "circlize", "cli", "clipr", "coda", "colorspace", "covr", "cowplot", "cpp11", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "ellipsis", "esquisse", "flexdashboard", "flexmix", "fs", "furrr", "future", "generics", "ggplot2", "glue", "googleAnalyticsR", "googleAuthR", "googleVis", "graphlayouts", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "labeling", "later", "lubridate", "magick", "modelr", "network", "NLP", "openssl", "patchwork", "pillar", "pingr", "pkgbuild", "pkgload", "promises", "R6", "raster", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rstudioapi", "rvest", "shape", "shinytest", "shinyWidgets", "sna", "sp", "statnet.common", "stringi", "sys", "systemfonts", "tibble", "tidyr", "tidytext", "tinytex", "usethis", "vctrs", "withr", "WriteXLS", "xfun"))
install.packages(c("backports", "broom", "circlize", "cli", "clipr", "coda", "colorspace", "covr", "cowplot", "cpp11", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "ellipsis", "esquisse", "flexdashboard", "flexmix", "fs", "furrr", "future", "generics", "ggplot2", "glue", "googleAnalyticsR", "googleAuthR", "googleVis", "graphlayouts", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "labeling", "later", "lubridate", "magick", "modelr", "network", "NLP", "openssl", "patchwork", "pillar", "pingr", "pkgbuild", "pkgload", "promises", "R6", "raster", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rstudioapi", "rvest", "shape", "shinytest", "shinyWidgets", "sna", "sp", "statnet.common", "stringi", "sys", "systemfonts", "tibble", "tidyr", "tidytext", "tinytex", "usethis", "vctrs", "withr", "WriteXLS", "xfun"))
library(shiny)
library(tidyverse)
library(gtrendsR)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
library(shiny)
library(tidyverse)
install.packages("htmltools")
uninstall.packages('htmltools')
install.packages(c("backports", "broom", "circlize", "cli", "clipr", "coda", "colorspace", "covr", "cowplot", "cpp11", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "ellipsis", "esquisse", "flexdashboard", "flexmix", "fs", "furrr", "future", "generics", "ggplot2", "glue", "googleAnalyticsR", "googleAuthR", "googleVis", "graphlayouts", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "labeling", "later", "lubridate", "magick", "modelr", "network", "NLP", "openssl", "patchwork", "pillar", "pingr", "pkgbuild", "pkgload", "promises", "R6", "raster", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rstudioapi", "rvest", "shape", "shinytest", "shinyWidgets", "sna", "sp", "statnet.common", "stringi", "sys", "systemfonts", "tibble", "tidyr", "tidytext", "tinytex", "usethis", "vctrs", "withr", "WriteXLS", "xfun"))
install.packages(c("backports", "broom", "circlize", "cli", "clipr", "coda", "colorspace", "covr", "cowplot", "cpp11", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "ellipsis", "esquisse", "flexdashboard", "flexmix", "fs", "furrr", "future", "generics", "ggplot2", "glue", "googleAnalyticsR", "googleAuthR", "googleVis", "graphlayouts", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "labeling", "later", "lubridate", "magick", "modelr", "network", "NLP", "openssl", "patchwork", "pillar", "pingr", "pkgbuild", "pkgload", "promises", "R6", "raster", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rstudioapi", "rvest", "shape", "shinytest", "shinyWidgets", "sna", "sp", "statnet.common", "stringi", "sys", "systemfonts", "tibble", "tidyr", "tidytext", "tinytex", "usethis", "vctrs", "withr", "WriteXLS", "xfun"))
install.packages(c("backports", "broom", "circlize", "cli", "clipr", "coda", "colorspace", "covr", "cowplot", "cpp11", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "ellipsis", "esquisse", "flexdashboard", "flexmix", "fs", "furrr", "future", "generics", "ggplot2", "glue", "googleAnalyticsR", "googleAuthR", "googleVis", "graphlayouts", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "knitr", "labeling", "later", "lubridate", "magick", "modelr", "network", "NLP", "openssl", "patchwork", "pillar", "pingr", "pkgbuild", "pkgload", "promises", "R6", "raster", "Rcpp", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rstudioapi", "rvest", "shape", "shinytest", "shinyWidgets", "sna", "sp", "statnet.common", "stringi", "sys", "systemfonts", "tibble", "tidyr", "tidytext", "tinytex", "usethis", "vctrs", "withr", "WriteXLS", "xfun"))
install.packages("htmltools")
install.packages("shiny")
install.packages("gtrendsR")
library(shiny); runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
source('C:/Users/HP/Desktop/Gtrends/ap.R')
library(shiny)
library(tidyverse)
library(gtrendsR)
library(ggplot2)
datasets <- data(package = "ggplot2")$results[c(2, 4, 10), "Item"]
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = datasets),
verbatimTextOutput("summary"),
tableOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summmry <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset)
}, res = 96)
}
shinyApp(ui,server)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset)
}, res = 96)
}
shinyApp(ui,server)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui,server)
library(shiny)
library(tidyverse)
library(gtrendsR)
library(ggplot2)
theme_demo <- function(theme) {
fluidPage(
theme = shinythemes::shinytheme(theme),
sidebarLayout(
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30)
),
mainPanel(
h1("Header 1"),
h2("Header 2"),
p("Some text")
)
)
)
}
theme_demo("darkly")
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
exists()
1
library(shiny)
library(tidyverse)
library(gtrendsR)
library(ggplot2)
library(shinythemes)
theme_demo <- function(theme) {
fluidPage(
theme = shinythemes::shinytheme(theme),
sidebarLayout(
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30)
),
mainPanel(
h1("Header 1"),
h2("Header 2"),
p("Some text")
)
)
)
}
theme_demo("darkly")
theme_demo("flatly")
theme_demo("sandstone")
theme_demo("united")
server<-function(input,output,session){}
shinyApp(ui,server)
source('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
install.packages("DT")
install.packages("DT")
install.packages("DT")
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
install.packages("naniar")
install.packages("skimr")
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
install.packages("shinyWidgets")
install.packages("shinyWidgets")
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
runApp('C:/Users/HP/Desktop/Gtrends/ap.R')
shiny::runApp('C:/Users/HP/Desktop/bbi topic modelling/mba')
getwd()
setwd("C:/Users/HP/Desktop/bbi topic modelling/Market_Basket_Analysis-master/Market_Basket_Analysis-master/Shiny_App")
runApp()
install.packages("recommenderlab")
runApp()
install.packages("slam")
runApp()
runApp()
install.packages("data.table")
runApp()
item_list <- readRDS("C:/Users/HP/Desktop/bbi topic modelling/Market_Basket_Analysis-master/Market_Basket_Analysis-master/Shiny_App/item_list.rds")
Online_Retail_2011_Q1 = read.excel("Onlie Retail.xlsx", header = TRUE)
library(readxl)
library(arules)
library(tidyverse)
library(arulesViz)
install.packages("arulesViz")
library(readxl)
Online_Retail_2011_Q1 = read.excel("Onlie Retail.xlsx", header = TRUE)
Online_Retail_2011_Q1 = read_excel("Onlie Retail.xlsx", header = TRUE)
Online_Retail_2011_Q1 = read_excel("Online Retail.xlsx", header = TRUE)
Online_Retail_2011_Q1 = read_excel("Online Retail.xlsx")
install.packages("xfun")
knitr::opts_chunk$set(echo = TRUE)
#library(rexplorables)
library(arules)
library(tidyverse)
library(arulesViz)
library(readxl)
Online_Retail_2011_Q1 = read_excel("Online Retail.xlsx")
head(Online_Retail_2011_Q1)
head(Online_Retail_2011_Q1)
library(skimr)
library(tidyverse)
Online_Retail_2011_Q1%>%skim()
Online_Retail_clean = Online_Retail %>% filter(complete.cases(.))
Online_Retail_clean = Online_Retail_2011_Q1 %>% filter(complete.cases(.))
library(naniar)
vis_miss(Online_Retail_2011_Q1)
library(naniar)
vis_miss_upset(Online_Retail_2011_Q1)
library(naniar)
gg_miss_upset(Online_Retail_2011_Q1)
library(naniar)
gg_miss_upset(Online_Retail_2011_Q1)
visdat::vis_dat(Online_Retail_2011_Q1)
library(naniar)
gg_miss_upset(Online_Retail_2011_Q1)
separate(data=Online_Retail_clean,col=InvoiceDate,into=c(Date,Time),sep='')
separate(data=Online_Retail_clean,col="InvoiceDate",into=c("Date","Time"),sep='')
help("separate")
separate(data=Online_Retail_clean,col="InvoiceDate",into=c("Date","Time"),sep=' ')
x<-separate(data=Online_Retail_clean,col="InvoiceDate",into=c("Date","Time"),sep=' ')
x<-separate(data=Online_Retail_clean,col="InvoiceDate",into=c("Date","Time"),sep=' ')
x
x<-x%>%group_by(InvoiceNo)
x
x<-x%>%select("InvoiceNo")
x
x<-x%>%group_by("InvoiceNo")
x
x<-x%>%group_by("InvoiceNo")%>%count()
x
x<-x%>%select("InvoiceNo",'Description','Date','Time')
x<-x%>%select("InvoiceNo",'Description','Date','Time')
x<-x%>%select("InvoiceNo",'Description','Date','Time')
x<-separate(data=Online_Retail_clean,col="InvoiceDate",into=c("Date","Time"),sep=' ')
x
x<-x%>%select("InvoiceNo",'Description','Date','Time')
x
itemFrequencyPlot(trans, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(x, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(x, topN=15, type="absolute", col="Description",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
data_list = split(x$Description, x$InvoiceNo)
Online_trx = as(data_list, "transactions")
data_list = split(x$Description, x$InvoiceNo)
Online_trx = as(data_list, "transactions")
summary(Online_trx)
itemFrequencyPlot(Online_trx, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(Online_trx, topN=30, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
x %>%
mutate(Month=as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
library(lubridate)
x %>%
mutate(Month=as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
library(lubridate)
x %>%
mutate(Month=as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(InvoiceNo=n_distinct(InvoiceNo)) %>%
ggplot(aes(x=Month, y=InvoiceNo)) +
geom_bar(stat="identity", fill="mistyrose2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
library(lubridate)
x %>%
mutate(Month=as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(InvoiceNo=n_distinct(InvoiceNo)) %>%
ggplot(aes(x=Month, y=InvoiceNo)) +
geom_bar(stat="identity", fill="mistyrose2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=InvoiceNo)) +
labs(title="Transactions per month") +
theme_bw()
x %>%
mutate(WeekDay=as.factor(weekdays(as.Date(Date)))) %>%
group_by(WeekDay) %>%
summarise(inv=n_distinct(InvoiceNo)) %>%
ggplot(aes(x=WeekDay, y=inv)) +
geom_bar(stat="identity", fill="peachpuff2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=inv)) +
labs(title="Transactions per weekday") +
scale_x_discrete(limits=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")) +
theme_bw()
x %>%
mutate(Hour=as.factor(hour(hms(Time)))) %>%
group_by(Hour) %>%
summarise(Tr=n_distinct(InvoiceNo)) %>%
ggplot(aes(x=Hour, y=Tr)) +
geom_bar(stat="identity", fill="steelblue1", show.legend=FALSE, colour="black") +
geom_label(aes(label=Tr)) +
labs(title="Transactions per hour") +
theme_bw()
# Data frame
num_rules <- data.frame(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5, confidenceLevels)
# Data frame
rules_sup1_conf50 <- apriori(Online_trx, parameter=list(sup=supportLevels[3],
conf=confidenceLevels[5], target="rules"))
# Data frame
rules_online = apriori(Online_trx,
parameter = list(supp = 0.01, conf = 0.8, minlen = 2))
inspect(rules_online)
# Data frame
rules_online = apriori(Online_trx,
parameter = list(supp = 0.01, conf = 0.6, minlen = 2))
inspect(rules_online)
plot(rules_sup1_conf50, measure=c("support", "lift"), shading="confidence")
plot(rules_online, measure=c("support", "lift"), shading="confidence")
plot(rules_online, method="graph")
# Data frame
rules_online = apriori(Online_trx,
parameter = list(supp = 0.01, conf = 0.8, minlen = 2))
plot(rules_online, method="graph")
plot(rules_online, method="graph",control=list(layout=igraph::in_circle()))
plot(rules_online, method="graph")
plot(rules_online, method="graph",control=list(layout=igraph::in_circle()))
plot(rules_online, method="grouped")
plot(rules_online, method="grouped")
rules_online1 = apriori(Online_trx,
parameter = list(supp = 0.005, conf = 0.8, minlen = 2))
plot(rules_online1, method="graph", control=list(layout=igraph::in_circle()))
plot(rules_online1, method="paracoord", control=list(reorder=TRUE))
plot(rules_online, method="paracoord", control=list(reorder=TRUE))
plot(rules_online, method="grouped")
inspect(sort(rules_online, by = 'lift')[1:20])
inspect(sort(rules_online, by = 'lift'))
ham.rules <- subset(grocery.rules, items %in% 'HAND WARMER UNION JACK')
ham.rules <- subset(rules_online, items %in% 'HAND WARMER UNION JACK')
inspect(ham.rules)
ham.rules <- subset(rules_online, items %in% 'HAND WARMER UNION JACK')
inspect(ham.rules)
ham.rules <- subset(rules_online, items %in% 'JACK')
ham.rules <- subset(rules_online, items %in% 'PINK REGENCY TEACUP AND SAUCER')
inspect(ham.rules)
library("RColorBrewer")
itemFrequencyPlot(Online_trx, topN=15,col=brewer.pal(8,'Pastel2'), type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
library("RColorBrewer")
itemFrequencyPlot(Online_trx, topN=15,col=brewer.pal(8,'Pastel2'), type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
library("RColorBrewer")
itemFrequencyPlot(Online_trx, topN=15,col=brewer.pal(8,'Pastel2'), type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot",interactive = TRUE)
plot(rules_online, measure=c("support", "lift"), shading="confidence",interactive = TRUE)
subrules2 <- head(sort(rules_online, by="confidence"),20)
ig <- plot( subrules2, method="graph", control=list(type="items") )
ig_df <- get.data.frame( ig, what = "both" )
library(data.table)
library(knitr)
library(DT)
library(plotly)
library(visNetwork)
library(igraph)
library(kableExtra)
install.packages("kableExtra")
library(data.table)
library(knitr)
library(DT)
library(plotly)
library(visNetwork)
library(igraph)
library(kableExtra)
subrules2 <- head(sort(rules_online, by="confidence"),20)
ig <- plot( subrules2, method="graph", control=list(type="items") )
ig_df <- get.data.frame( ig, what = "both" )
nodesv %>%
visNodes(size = 10) %>%
visLegend() %>%
visEdges(smooth = FALSE) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visInteraction(navigationButtons = TRUE) %>%
visEdges(arrows = 'from') %>%
visPhysics(
solver = "barnesHut",
maxVelocity = 35,
forceAtlas2Based = list(gravitationalConstant = -6000)
)
subrules2 <- head(sort(rules_online, by="confidence"),20)
ig <- plot( subrules2, method="graph", control=list(type="items") )
ig_df <- get.data.frame( ig, what = "both" )
ig_df %>%
visNodes(size = 10) %>%
visLegend() %>%
vis
nodesv %>%
visNodes(size = 10) %>%
visLegend() %>%
vis
rules_online = apriori(Online_trx,
parameter = list(supp = 0.01, conf = 0.8, minlen = 2))
library(rexplorables)
library(arules)
library(tidyverse)
library(arulesViz)
library(readxl)
Online_Retail_2011_Q1 = read_excel("Online Retail.xlsx")
Online_Retail_clean = Online_Retail %>% filter(complete.cases(.))
data_list = split(Online_Retail_clean$Description, Online_Retail_clean$InvoiceNo)
shiny::runApp('C:/Users/HP/Desktop/Gtrends/super')
